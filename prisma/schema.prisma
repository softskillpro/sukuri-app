generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(uuid())
  name          String?
  email         String?        @unique
  accounts      Account[]
  sessions      Session[]
  username      String         @unique
  address       String         @unique
  created_date  DateTime       @default(now())
  updated_date  DateTime       @default(now()) @updatedAt
  subscriptions Subscription[]
  pass          SukuriPass?    @relation(fields: [sukuriPassId], references: [id])
  sukuriPassId  String?
  Project       Project[]
  balances      Balance[]
  Image         Image[]
}

model Subscription {
  id              String      @id @default(uuid())
  userId          String
  projectId       String
  tierId          String
  created_date    DateTime    @default(now())
  updated_date    DateTime    @default(now()) @updatedAt
  last_processed  DateTime
  expires         DateTime
  should_continue Boolean
  priority        Int         @unique
  user            User        @relation(fields: [userId], references: [id])
  project         Project     @relation(fields: [projectId], references: [id])
  tier            ProjectTier @relation(fields: [tierId], references: [id])

  @@unique([userId, projectId, tierId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SukuriPass {
  id         String  @id @unique @default(uuid())
  trim       String?
  background String?
  foil       String?
  User       User[]
}

model Project {
  id                String           @id @unique @default(uuid())
  name              String           @unique
  short_description String
  long_description  String
  thumbnail_image   String?
  large_image       String?
  chain_id          Int
  member_count      Int?
  is_erc721         Boolean
  is_featured       Boolean?
  created_date      DateTime         @default(now())
  updated_date      DateTime         @default(now()) @updatedAt
  accepted_payments ProjectPayment[]
  tiers             ProjectTier[]
  subscriptions     Subscription[]
  userId            String?
  User              User?            @relation(fields: [userId], references: [id])
  Image             Image[]
}

model Balance {
  id            String        @id @default(uuid())
  userId        String
  token         String
  balance       BigInt
  updatedAt     DateTime      @default(now())
  user          User          @relation(fields: [userId], references: [id])
  PaymentOption PaymentOption @relation(fields: [token], references: [token])

  @@unique([userId, token])
}

model PaymentOption {
  token    String           @id
  name     String
  symbol   String
  is_eth   Boolean
  projects ProjectPayment[]
  balances Balance[]
}

model ProjectPayment {
  projectId String
  token     String
  Project   Project       @relation(fields: [projectId], references: [id])
  Payment   PaymentOption @relation(fields: [token], references: [token])

  @@id([projectId, token])
}

model ProjectTier {
  id                       String         @id @unique @default(uuid())
  address                  String
  tier_id                  Int
  name                     String
  price                    String
  unit                     String
  supply                   Int
  filled                   Int
  subscription_length      Int
  subscription_length_unit String
  description              String
  features                 String[]
  created_date             DateTime       @default(now())
  updated_date             DateTime       @default(now()) @updatedAt
  Project                  Project?       @relation(fields: [projectId], references: [id])
  projectId                String?
  Subscription             Subscription[]

  Image Image[]
}

model Image {
  id            String       @id @unique @default(uuid())
  key           String
  url           String
  type          String
  description   String?
  created_date  DateTime     @default(now())
  updated_date  DateTime     @default(now()) @updatedAt
  projectId     String?
  project       Project?     @relation(fields: [projectId], references: [id])
  projectTierId String?
  projectTier   ProjectTier? @relation(fields: [projectTierId], references: [id])
  userId        String?
  user          User?        @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([projectTierId])
  @@index([userId])
}
