generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(uuid())
  name           String?
  email          String?          @unique
  username       String           @unique
  address        String           @unique
  sukuriPassId   String?
  created_date   DateTime         @default(now())
  updated_date   DateTime         @default(now()) @updatedAt
  accounts       Account[]
  balances       Balance[]
  Image          Image[]
  PaymentHistory PaymentHistory[]
  Project        Project[]
  sessions       Session[]
  subscriptions  Subscription[]
  pass           SukuriPass?      @relation(fields: [sukuriPassId], references: [id])
}

model Subscription {
  id              String           @id @default(uuid())
  userId          String
  projectId       String
  tierId          String
  last_processed  DateTime
  expires         DateTime
  should_continue Boolean
  priority        Int              @unique @default(autoincrement())
  created_date    DateTime         @default(now())
  updated_date    DateTime         @default(now()) @updatedAt
  PaymentHistory  PaymentHistory[]
  project         Project          @relation(fields: [projectId], references: [id])
  tier            ProjectTier      @relation(fields: [tierId], references: [id])
  user            User             @relation(fields: [userId], references: [id])

  @@unique([userId, projectId, tierId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SukuriPass {
  id         String  @id @unique @default(uuid())
  trim       String?
  background String?
  foil       String?
  User       User[]
}

model Project {
  id                String           @id @unique @default(uuid())
  name              String           @unique
  short_description String
  long_description  String
  thumbnail_image   String?
  large_image       String?
  chain_id          Int
  member_count      Int?
  is_erc721         Boolean
  is_featured       Boolean?
  userId            String?
  created_date      DateTime         @default(now())
  updated_date      DateTime         @default(now()) @updatedAt
  discord_url       String?
  instagram_url     String?
  medium_url        String?
  telegram_url      String?
  twitter_url       String?
  website_url       String?
  Image             Image[]
  PaymentHistory    PaymentHistory[]
  User              User?            @relation(fields: [userId], references: [id])
  accepted_payments ProjectPayment[]
  tiers             ProjectTier[]
  subscriptions     Subscription[]
}

model Balance {
  id            String        @id @default(uuid())
  userId        String
  token         String
  balance       BigInt
  updatedAt     DateTime      @default(now())
  PaymentOption PaymentOption @relation(fields: [token], references: [token])
  user          User          @relation(fields: [userId], references: [id])

  @@unique([userId, token])
}

model PaymentOption {
  token    String           @id
  name     String
  symbol   String
  is_eth   Boolean
  balances Balance[]
  projects ProjectPayment[]
}

model ProjectPayment {
  projectId String
  token     String
  Project   Project       @relation(fields: [projectId], references: [id])
  Payment   PaymentOption @relation(fields: [token], references: [token])

  @@id([projectId, token])
}

model ProjectTier {
  id                       String         @id @unique @default(uuid())
  address                  String
  tier_id                  Int
  name                     String
  price                    String
  unit                     String
  supply                   Int
  filled                   Int
  subscription_length      Int
  subscription_length_unit String
  description              String
  features                 String[]
  projectId                String?
  created_date             DateTime       @default(now())
  updated_date             DateTime       @default(now()) @updatedAt
  Image                    Image[]
  Project                  Project?       @relation(fields: [projectId], references: [id])
  Subscription             Subscription[]
}

model Image {
  id            String       @id @unique @default(uuid())
  key           String
  url           String
  type          String
  description   String?
  created_date  DateTime     @default(now())
  updated_date  DateTime     @default(now()) @updatedAt
  projectId     String?
  projectTierId String?
  userId        String?
  project       Project?     @relation(fields: [projectId], references: [id])
  projectTier   ProjectTier? @relation(fields: [projectTierId], references: [id])
  user          User?        @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([projectTierId])
  @@index([userId])
}

model PaymentHistory {
  id             String       @id @unique @default(uuid())
  userId         String
  subscriptionId String
  txn_date       DateTime
  txn_hash       String
  price          String
  token_paid_in  String
  confirmation   Boolean
  created_date   DateTime     @default(now())
  projectId      String?
  Project        Project?     @relation(fields: [projectId], references: [id])
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([subscriptionId])
  @@index([txn_hash])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Whitelist {
  id      BigInt @id @default(autoincrement())
  address String @unique
}

model LeaderboardPosition {
  id           String @id @default(uuid())
  address      String @unique
  points       String
  last_updated String
}
