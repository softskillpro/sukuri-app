// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    accounts      Account[]
    sessions      Session[]
    username     String      @unique
    address      String      @unique
    subscribed   Project[]
    pass         SukuriPass? @relation(fields: [sukuriPassId], references: [id])
    sukuriPassId String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model SukuriPass {
  id         String  @id @unique @default(cuid())
  trim       String?
  background String?
  foil       String?
  User       User[]
}

model Project {
  id                String        @id @unique @default(cuid())
  name              String        @unique
  short_description String
  long_description  String
  thumbnail_image   String?
  large_image       String?
  chain_id          Int
  member_count      BigInt?
  is_erc721         Boolean
  accepted_payments Json
  tiers             ProjectTier[]
  User              User?         @relation(fields: [userId], references: [id])
  userId            String?
}

model ProjectTier {
  id                       String   @id @unique @default(cuid())
  address                  String
  tier_id                  Int
  name                     String
  price                    String
  unit                     String
  supply                   BigInt
  filled                   BigInt
  subscription_length      Int
  subscription_length_unit String
  description              String
  features                 String[]
  Project                  Project? @relation(fields: [projectId], references: [id])
  projectId                String?
}